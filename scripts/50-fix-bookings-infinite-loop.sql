-- Script para identificar y corregir el problema del bucle infinito en bookings
-- Este script analiza las dependencias circulares y las corrige

-- 1. Verificar el estado actual de la tabla bookings
DO $$
BEGIN
    RAISE NOTICE '=== AN√ÅLISIS DE LA TABLA BOOKINGS ===';
    
    -- Verificar si RLS est√° habilitado
    IF EXISTS (
        SELECT 1 FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename = 'bookings' 
        AND rowsecurity = true
    ) THEN
        RAISE NOTICE 'RLS est√° HABILITADO en la tabla bookings';
    ELSE
        RAISE NOTICE 'RLS est√° DESHABILITADO en la tabla bookings';
    END IF;
    
    -- Verificar pol√≠ticas existentes
    IF EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename = 'bookings'
    ) THEN
        RAISE NOTICE 'Existen pol√≠ticas RLS en la tabla bookings';
    ELSE
        RAISE NOTICE 'NO existen pol√≠ticas RLS en la tabla bookings';
    END IF;
END $$;

-- 2. Verificar la estructura de la tabla bookings y sus dependencias
SELECT 
    column_name,
    data_type,
    is_nullable,
    column_default,
    CASE 
        WHEN column_name = 'tenant_id' THEN 'üîë CLAVE MULTI-TENANT'
        WHEN column_name = 'property_id' THEN 'üè† REFERENCIA A PROPIEDAD'
        WHEN column_name = 'person_id' THEN 'üë§ REFERENCIA A PERSONA'
        WHEN column_name = 'created_at' THEN 'üìÖ TIMESTAMP'
        WHEN column_name = 'updated_at' THEN 'üìÖ TIMESTAMP'
        ELSE 'üìã CAMPO NORMAL'
    END as description
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'bookings'
ORDER BY ordinal_position;

-- 3. Verificar las pol√≠ticas RLS existentes en bookings
SELECT 
    policyname,
    cmd as operation,
    permissive,
    qual as using_condition,
    with_check as check_condition,
    CASE 
        WHEN cmd = 'SELECT' THEN 'üîç Ver reservas'
        WHEN cmd = 'INSERT' THEN '‚ûï Crear reservas'
        WHEN cmd = 'UPDATE' THEN '‚úèÔ∏è Actualizar reservas'
        WHEN cmd = 'DELETE' THEN 'üóëÔ∏è Eliminar reservas'
        ELSE '‚ùì Operaci√≥n desconocida'
    END as description
FROM pg_policies 
WHERE schemaname = 'public' 
AND tablename = 'bookings'
ORDER BY cmd;

-- 4. Verificar si hay dependencias circulares en las pol√≠ticas
-- Buscar pol√≠ticas que referencien otras tablas que puedan causar bucles
SELECT 
    p.policyname,
    p.cmd,
    p.qual,
    CASE 
        WHEN p.qual LIKE '%properties%' THEN 'üè† Referencia a properties'
        WHEN p.qual LIKE '%people%' THEN 'üë§ Referencia a people'
        WHEN p.qual LIKE '%reservations%' THEN 'üìÖ Referencia a reservations'
        WHEN p.qual LIKE '%auth.uid%' THEN 'üîê Referencia a usuario autenticado'
        WHEN p.qual LIKE '%tenant_id%' THEN 'üîë Referencia a tenant'
        ELSE 'üìã Sin referencias externas'
    END as external_references
FROM pg_policies p
WHERE p.schemaname = 'public' 
AND p.tablename = 'bookings';

-- 5. Verificar que las pol√≠ticas de bookings sean simples y eficientes
-- Las pol√≠ticas complejas con EXISTS pueden causar bucles
DO $$
BEGIN
    RAISE NOTICE '=== AN√ÅLISIS DE COMPLEJIDAD DE POL√çTICAS ===';
    
    -- Contar pol√≠ticas con EXISTS (potencialmente problem√°ticas)
    DECLARE
        exists_policies_count INTEGER;
        simple_policies_count INTEGER;
    BEGIN
        SELECT COUNT(*) INTO exists_policies_count
        FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename = 'bookings'
        AND (qual LIKE '%EXISTS%' OR qual LIKE '%JOIN%');
        
        SELECT COUNT(*) INTO simple_policies_count
        FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename = 'bookings'
        AND qual NOT LIKE '%EXISTS%' 
        AND qual NOT LIKE '%JOIN%';
        
        RAISE NOTICE 'Pol√≠ticas con EXISTS/JOIN (potencialmente problem√°ticas): %', exists_policies_count;
        RAISE NOTICE 'Pol√≠ticas simples: %', simple_policies_count;
        
        IF exists_policies_count > 0 THEN
            RAISE NOTICE '‚ö†Ô∏è ADVERTENCIA: Las pol√≠ticas con EXISTS pueden causar bucles infinitos';
            RAISE NOTICE 'üí° RECOMENDACI√ìN: Simplificar las pol√≠ticas para usar solo tenant_id';
        END IF;
    END;
END $$;

-- 6. Crear pol√≠ticas simplificadas para evitar bucles
-- Primero eliminar las pol√≠ticas existentes que puedan ser problem√°ticas
DROP POLICY IF EXISTS "Users can view bookings for their properties" ON public.bookings;
DROP POLICY IF EXISTS "Users can insert bookings for their properties" ON public.bookings;
DROP POLICY IF EXISTS "Users can update bookings for their properties" ON public.bookings;
DROP POLICY IF EXISTS "Users can delete bookings for their properties" ON public.bookings;

-- 7. Crear pol√≠ticas simplificadas basadas solo en tenant_id
-- Esto evita las consultas EXISTS que pueden causar bucles

-- Pol√≠tica para SELECT: Usuarios solo pueden ver reservas de su tenant
CREATE POLICY "Users can view bookings for their tenant" 
ON public.bookings 
FOR SELECT 
TO authenticated 
USING (
    tenant_id = (
        SELECT tenant_id 
        FROM public.users 
        WHERE id = auth.uid()
    )
);

-- Pol√≠tica para INSERT: Usuarios solo pueden crear reservas en su tenant
CREATE POLICY "Users can insert bookings for their tenant" 
ON public.bookings 
FOR INSERT 
TO authenticated 
WITH CHECK (
    tenant_id = (
        SELECT tenant_id 
        FROM public.users 
        WHERE id = auth.uid()
    )
);

-- Pol√≠tica para UPDATE: Usuarios solo pueden actualizar reservas de su tenant
CREATE POLICY "Users can update bookings for their tenant" 
ON public.bookings 
FOR UPDATE 
TO authenticated 
USING (
    tenant_id = (
        SELECT tenant_id 
        FROM public.users 
        WHERE id = auth.uid()
    )
);

-- Pol√≠tica para DELETE: Usuarios solo pueden eliminar reservas de su tenant
CREATE POLICY "Users can delete bookings for their tenant" 
ON public.bookings 
FOR DELETE 
TO authenticated 
USING (
    tenant_id = (
        SELECT tenant_id 
        FROM public.users 
        WHERE id = auth.uid()
    )
);

-- 8. Verificar que las nuevas pol√≠ticas se crearon correctamente
DO $$
BEGIN
    RAISE NOTICE '=== POL√çTICAS SIMPLIFICADAS CREADAS ===';
    
    -- Contar las nuevas pol√≠ticas
    DECLARE
        new_policies_count INTEGER;
    BEGIN
        SELECT COUNT(*) INTO new_policies_count
        FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename = 'bookings';
        
        RAISE NOTICE 'Total de pol√≠ticas en bookings: %', new_policies_count;
        
        IF new_policies_count = 4 THEN
            RAISE NOTICE '‚úÖ Todas las pol√≠ticas creadas correctamente';
        ELSE
            RAISE NOTICE '‚ùå Faltan pol√≠ticas: % de 4', 4 - new_policies_count;
        END IF;
    END;
    
    -- Verificar que las pol√≠ticas son simples
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename = 'bookings'
        AND (qual LIKE '%EXISTS%' OR qual LIKE '%JOIN%')
    ) THEN
        RAISE NOTICE '‚úÖ Todas las pol√≠ticas son simples (sin EXISTS/JOIN)';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è ADVERTENCIA: Algunas pol√≠ticas a√∫n contienen EXISTS/JOIN';
    END IF;
END $$;

-- 9. Mostrar el estado final de las pol√≠ticas
SELECT 
    policyname,
    cmd as operation,
    CASE 
        WHEN qual LIKE '%tenant_id%' THEN 'üîë Basada en tenant_id'
        WHEN qual LIKE '%auth.uid%' THEN 'üîê Basada en usuario'
        ELSE '‚ùì Desconocida'
    END as policy_type,
    qual as using_condition
FROM pg_policies 
WHERE schemaname = 'public' 
AND tablename = 'bookings'
ORDER BY cmd;

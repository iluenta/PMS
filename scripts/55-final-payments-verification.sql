-- Script de verificaci√≥n final que incluye payments junto con todas las dem√°s tablas
-- Este script debe ejecutarse despu√©s de todos los scripts de seguridad y multi-tenant

-- 1. Verificaci√≥n general del estado de RLS en todas las tablas cr√≠ticas (INCLUYENDO PAYMENTS)
SELECT 
    schemaname,
    tablename,
    rowsecurity as rls_enabled,
    CASE 
        WHEN rowsecurity THEN '‚úÖ HABILITADO'
        ELSE '‚ùå DESHABILITADO (INSECURO)'
    END as status
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN (
    'users',           -- üîê Usuarios
    'properties',      -- üè† Propiedades
    'bookings',        -- üìÖ Reservas
    'people',          -- üë§ Personas
    'documents',       -- üìÑ Documentos
    'expenses',        -- üí∞ Gastos
    'reservations',    -- üóìÔ∏è Reservas (legacy)
    'payments'         -- üí≥ Pagos (NUEVO)
)
ORDER BY tablename;

-- 2. Verificaci√≥n de pol√≠ticas RLS por tabla (INCLUYENDO PAYMENTS)
WITH table_policies AS (
    SELECT 
        tablename,
        COUNT(*) as policy_count,
        STRING_AGG(cmd, ', ' ORDER BY cmd) as operations
    FROM pg_policies 
    WHERE schemaname = 'public' 
    AND tablename IN (
        'users', 'properties', 'bookings', 'people', 
        'documents', 'expenses', 'reservations', 'payments'
    )
    GROUP BY tablename
)
SELECT 
    tp.tablename,
    tp.policy_count,
    tp.operations,
    CASE 
        WHEN tp.policy_count >= 4 THEN '‚úÖ COMPLETA'
        WHEN tp.policy_count >= 2 THEN '‚ö†Ô∏è PARCIAL'
        ELSE '‚ùå INCOMPLETA'
    END as security_status
FROM table_policies tp
ORDER BY tp.tablename;

-- 3. Verificaci√≥n espec√≠fica de la tabla payments
DO $$
BEGIN
    RAISE NOTICE '=== VERIFICACI√ìN ESPEC√çFICA DE PAYMENTS ===';
    
    -- Verificar RLS
    IF EXISTS (
        SELECT 1 FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename = 'payments' 
        AND rowsecurity = true
    ) THEN
        RAISE NOTICE '‚úÖ RLS habilitado en payments';
    ELSE
        RAISE NOTICE '‚ùå RLS NO habilitado en payments - CR√çTICO';
    END IF;
    
    -- Verificar pol√≠ticas
    DECLARE
        payments_policies INTEGER;
        multi_tenant_policies INTEGER;
    BEGIN
        SELECT COUNT(*) INTO payments_policies
        FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename = 'payments';
        
        SELECT COUNT(*) INTO multi_tenant_policies
        FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename = 'payments'
        AND qual LIKE '%tenant_id%';
        
        IF payments_policies >= 4 THEN
            RAISE NOTICE '‚úÖ Pol√≠ticas completas en payments (% de 4)', payments_policies;
        ELSE
            RAISE NOTICE '‚ùå Pol√≠ticas incompletas en payments (% de 4)', payments_policies;
        END IF;
        
        IF multi_tenant_policies = 4 THEN
            RAISE NOTICE '‚úÖ Todas las pol√≠ticas son multi-tenant (% de 4)', multi_tenant_policies;
        ELSE
            RAISE NOTICE '‚ö†Ô∏è ADVERTENCIA: % pol√≠ticas no son multi-tenant', 4 - multi_tenant_policies;
        END IF;
    END;
END $$;

-- 4. Verificaci√≥n de multi-tenant en todas las tablas (INCLUYENDO PAYMENTS)
SELECT 
    tablename,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_schema = 'public' 
            AND table_name = tablename 
            AND column_name = 'tenant_id'
        ) THEN '‚úÖ CON tenant_id'
        ELSE '‚ùå SIN tenant_id'
    END as multi_tenant_status
FROM (
    VALUES 
        ('users'),
        ('properties'),
        ('bookings'),
        ('people'),
        ('documents'),
        ('expenses'),
        ('reservations'),
        ('payments')
) AS critical_tables(tablename)
ORDER BY tablename;

-- 5. Verificaci√≥n de que las pol√≠ticas multi-tenant est√°n funcionando (INCLUYENDO PAYMENTS)
-- Buscar pol√≠ticas que usen tenant_id
SELECT 
    p.tablename,
    p.policyname,
    p.cmd,
    CASE 
        WHEN p.qual LIKE '%tenant_id%' THEN '‚úÖ Multi-tenant'
        WHEN p.qual LIKE '%auth.uid%' THEN 'üîê Usuario espec√≠fico'
        ELSE '‚ùì Desconocida'
    END as policy_type
FROM pg_policies p
WHERE p.schemaname = 'public' 
AND p.tablename IN (
    'users', 'properties', 'bookings', 'people', 
    'documents', 'expenses', 'reservations', 'payments'
)
ORDER BY p.tablename, p.cmd;

-- 6. Verificaci√≥n espec√≠fica de la tabla users
DO $$
BEGIN
    RAISE NOTICE '=== VERIFICACI√ìN ESPEC√çFICA DE USERS ===';
    
    -- Verificar RLS
    IF EXISTS (
        SELECT 1 FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename = 'users' 
        AND rowsecurity = true
    ) THEN
        RAISE NOTICE '‚úÖ RLS habilitado en users';
    ELSE
        RAISE NOTICE '‚ùå RLS NO habilitado en users - CR√çTICO';
    END IF;
    
    -- Verificar pol√≠ticas
    DECLARE
        users_policies INTEGER;
    BEGIN
        SELECT COUNT(*) INTO users_policies
        FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename = 'users';
        
        IF users_policies >= 4 THEN
            RAISE NOTICE '‚úÖ Pol√≠ticas completas en users (% de 4)', users_policies;
        ELSE
            RAISE NOTICE '‚ùå Pol√≠ticas incompletas en users (% de 4)', users_policies;
        END IF;
        
        -- Verificar que las pol√≠ticas son restrictivas
        IF NOT EXISTS (
            SELECT 1 FROM pg_policies 
            WHERE schemaname = 'public' 
            AND tablename = 'users'
            AND qual = 'true'
        ) THEN
            RAISE NOTICE '‚úÖ Todas las pol√≠ticas son restrictivas';
        ELSE
            RAISE NOTICE '‚ö†Ô∏è ADVERTENCIA: Algunas pol√≠ticas son demasiado permisivas';
        END IF;
    END;
END $$;

-- 7. Verificaci√≥n espec√≠fica de la tabla bookings
DO $$
BEGIN
    RAISE NOTICE '=== VERIFICACI√ìN ESPEC√çFICA DE BOOKINGS ===';
    
    -- Verificar RLS
    IF EXISTS (
        SELECT 1 FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename = 'bookings' 
        AND rowsecurity = true
    ) THEN
        RAISE NOTICE '‚úÖ RLS habilitado en bookings';
    ELSE
        RAISE NOTICE '‚ùå RLS NO habilitado en bookings - CR√çTICO';
    END IF;
    
    -- Verificar pol√≠ticas
    DECLARE
        bookings_policies INTEGER;
        complex_policies INTEGER;
    BEGIN
        SELECT COUNT(*) INTO bookings_policies
        FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename = 'bookings';
        
        SELECT COUNT(*) INTO complex_policies
        FROM pg_policies 
        WHERE schemaname = 'public' 
        AND tablename = 'bookings'
        AND (qual LIKE '%EXISTS%' OR qual LIKE '%JOIN%');
        
        IF bookings_policies >= 4 THEN
            RAISE NOTICE '‚úÖ Pol√≠ticas completas en bookings (% de 4)', bookings_policies;
        ELSE
            RAISE NOTICE '‚ùå Pol√≠ticas incompletas en bookings (% de 4)', bookings_policies;
        END IF;
        
        IF complex_policies = 0 THEN
            RAISE NOTICE '‚úÖ Todas las pol√≠ticas son simples (sin EXISTS/JOIN)';
        ELSE
            RAISE NOTICE '‚ö†Ô∏è ADVERTENCIA: % pol√≠ticas complejas pueden causar bucles', complex_policies;
        END IF;
    END;
END $$;

-- 8. Resumen final de seguridad (INCLUYENDO PAYMENTS)
DO $$
BEGIN
    RAISE NOTICE '=== RESUMEN FINAL DE SEGURIDAD (INCLUYENDO PAYMENTS) ===';
    
    -- Contar tablas con RLS habilitado
    DECLARE
        tables_with_rls INTEGER;
        total_critical_tables INTEGER := 8; -- Incluye payments
        tables_with_policies INTEGER;
        multi_tenant_tables INTEGER;
    BEGIN
        SELECT COUNT(*) INTO tables_with_rls
        FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename IN (
            'users', 'properties', 'bookings', 'people', 
            'documents', 'expenses', 'reservations', 'payments'
        )
        AND rowsecurity = true;
        
        SELECT COUNT(*) INTO tables_with_policies
        FROM (
            SELECT DISTINCT tablename
            FROM pg_policies 
            WHERE schemaname = 'public' 
            AND tablename IN (
                'users', 'properties', 'bookings', 'people', 
                'documents', 'expenses', 'reservations', 'payments'
            )
        ) t;
        
        SELECT COUNT(*) INTO multi_tenant_tables
        FROM (
            VALUES 
                ('users'), ('properties'), ('bookings'), ('people'), 
                ('documents'), ('expenses'), ('reservations'), ('payments')
        ) AS critical_tables(tablename)
        WHERE EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_schema = 'public' 
            AND table_name = critical_tables.tablename 
            AND column_name = 'tenant_id'
        );
        
        RAISE NOTICE 'Tablas cr√≠ticas con RLS habilitado: % de %', tables_with_rls, total_critical_tables;
        RAISE NOTICE 'Tablas cr√≠ticas con pol√≠ticas RLS: % de %', tables_with_policies, total_critical_tables;
        RAISE NOTICE 'Tablas cr√≠ticas con multi-tenant: % de %', multi_tenant_tables, total_critical_tables;
        
        -- Evaluaci√≥n final
        IF tables_with_rls = total_critical_tables 
           AND tables_with_policies = total_critical_tables 
           AND multi_tenant_tables = total_critical_tables THEN
            RAISE NOTICE 'üéâ SEGURIDAD COMPLETA: Todas las tablas cr√≠ticas est√°n protegidas (INCLUYENDO PAYMENTS)';
        ELSIF tables_with_rls >= total_critical_tables * 0.8 
              AND tables_with_policies >= total_critical_tables * 0.8 
              AND multi_tenant_tables >= total_critical_tables * 0.8 THEN
            RAISE NOTICE '‚ö†Ô∏è SEGURIDAD PARCIAL: La mayor√≠a de las tablas est√°n protegidas';
        ELSE
            RAISE NOTICE '‚ùå SEGURIDAD INSUFICIENTE: Muchas tablas cr√≠ticas no est√°n protegidas';
        END IF;
    END;
END $$;

-- 9. Verificaci√≥n de integridad de datos en payments
SELECT 
    'Verificaci√≥n de integridad de payments' as check_type,
    COUNT(*) as total_payments,
    COUNT(CASE WHEN tenant_id IS NOT NULL THEN 1 END) as payments_with_tenant,
    COUNT(CASE WHEN tenant_id IS NULL THEN 1 END) as payments_without_tenant,
    CASE 
        WHEN COUNT(CASE WHEN tenant_id IS NULL THEN 1 END) = 0 THEN '‚úÖ TODOS LOS PAGOS TIENEN TENANT_ID'
        ELSE '‚ùå HAY PAGOS SIN TENANT_ID'
    END as integrity_status
FROM public.payments;

-- 10. Distribuci√≥n de pagos por tenant
SELECT 
    tenant_id,
    COUNT(*) as payment_count,
    SUM(amount) as total_amount,
    AVG(amount) as avg_amount
FROM public.payments 
GROUP BY tenant_id 
ORDER BY tenant_id;
